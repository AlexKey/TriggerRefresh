{"ts":1359847096521,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World from Cloud9\\n');\n}).listen(process.env.PORT);\n"]],"start1":0,"start2":0,"length1":0,"length2":191}]],"length":191}
{"contributors":[],"silentsave":false,"ts":1359847171969,"patch":[[{"diffs":[[1,"\n"],[0,"var "],[-1,"http"],[1,"openid"],[0," = r"]],"start1":0,"start2":0,"length1":12,"length2":15},{"diffs":[[0,"re('"],[-1,"http');\n"],[1,"openid');\nvar url = require('url');\nvar server = require('"],[0,"http"],[1,"')"],[0,".cre"]],"start1":19,"start2":19,"length1":20,"length2":72},{"diffs":[[0,"ver("],[1,"\n    "],[0,"function"],[-1," (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World from Cloud9\\n');\n})"],[1,"(req, res)\n    {\n        var parsedUrl = url.parse(req.url, true);\n        if(parsedUrl.pathname == '/verify')\n        {\n            // Verify identity assertion\n            var result = openid.verifyAssertion(req); // or req.url\n            res.writeHead(200);\n            res.end(result.authenticated ? 'Success  ' : 'Failure  ');\n        }\n        else if(parsedUrl.pathname == '/authenticate')\n        {\n            // Resolve identifier, associate, build authentication URL\n            openid.authenticate(\n                parsedUrl.query.openid_identifier, // user supplied identifier\n                'http://example.com/verify', // our callback URL\n                null, // realm (optional)\n                false, // attempt immediate authentication first?\n                function(authUrl)\n                {\n                    res.writeHead(302, { Location: authUrl });\n                    res.end();\n                });\n        }\n        else\n        {\n            // Deliver an OpenID form on all other URLs\n            res.writeHead(200);\n            res.end('<!DOCTYPE html><html><body>'\n                + '<form method=\"get\" action=\"/authenticate\">'\n                + '<p>Login using OpenID</p>'\n                + '<input name=\"openid_identifier\" />'\n                + '<input type=\"submit\" value=\"Login\" />'\n                + '</form></body></html>');\n        }\n    });\nserver"],[0,".lis"]],"start1":97,"start2":97,"length1":126,"length2":1412},{"diffs":[[0,"v.PORT);"],[-1,"\n"]],"start1":1523,"start2":1523,"length1":9,"length2":8}]],"length":1531,"saved":false}
{"ts":1359847334781,"patch":[[{"diffs":[[0,"p://"],[-1,"example.com"],[1,"triggerrefresh.alexkey.c9.io"],[0,"/ver"]],"start1":725,"start2":725,"length1":19,"length2":36}]],"length":1548,"saved":false}
{"ts":1359847370936,"patch":[[{"diffs":[[0,"ey.c9.io"],[1,":'+ process.env.PORT+ '"],[0,"/verify'"]],"start1":749,"start2":749,"length1":16,"length2":39}]],"length":1571,"saved":false}
{"ts":1359848012800,"patch":[[{"diffs":[[0,"sh.a"],[-1,"lexkey.c9.io:'+ process.env.PORT+ '"],[1,"zurewebsites.net"],[0,"/ver"]],"start1":741,"start2":741,"length1":43,"length2":24}]],"length":1552,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359849805253,"patch":[[{"diffs":[[0,"ten("],[-1,"process.env.PORT"],[1,"80"],[0,");"]],"start1":1530,"start2":1530,"length1":22,"length2":8}]],"length":1538,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359850455658,"patch":[[{"diffs":[[-1,"\n"],[0,"var openid ="]],"start1":0,"start2":0,"length1":13,"length2":12}]],"length":1537,"saved":false}
{"ts":1359851090297,"patch":[[{"diffs":[[0,"ire('url');\n"],[1,"var querystring = require('querystring');\nvar relyingParty = new openid.RelyingParty(\n    'http://triggerrefresh.azurewebsites.net/verify', // Verification URL (yours)\n    null, // Realm (optional, specifies realm for OpenID authentication)\n    false, // Use stateless verification\n    false, // Strict mode\n    []); // List of extensions to enable and include\n\n\n"],[0,"var server ="]],"start1":46,"start2":46,"length1":24,"length2":387},{"diffs":[[0,".url"],[-1,", true"],[0,");\n "]],"start1":530,"start2":530,"length1":14,"length2":8},{"diffs":[[0,"me == '/"],[-1,"verify"],[1,"authenticate"],[0,"')\n     "]],"start1":564,"start2":564,"length1":22,"length2":28},{"diffs":[[0,"cate')\n        {"],[-1,"\n"],[0," "],[1,"\n"],[0,"           // Ve"]],"start1":580,"start2":580,"length1":34,"length2":34},{"diffs":[[0,"    "],[-1," "],[0,"// "],[-1,"Verify identity assertion\n            var result = openid.verifyAssertion(req); // or req.url\n"],[1,"User supplied identifier\n          var query = querystring.parse(parsedUrl.query);\n          var identifier = query.openid_identifier;\n\n          // Resolve identifier, associate, and build authentication URL\n          relyingParty.authenticate(identifier, false, function(error, authUrl)\n              {\n                if (error)\n                {\n      "],[0,"    "]],"start1":604,"start2":604,"length1":106,"length2":367},{"diffs":[[0,"    "],[1,"      "],[0,"res.end("],[-1,"result.a"],[1,"'A"],[0,"uthe"]],"start1":1007,"start2":1007,"length1":24,"length2":24},{"diffs":[[0,"icat"],[-1,"ed ? 'Success  ' : 'Failure  ');\n"],[1,"ion failed: ' + error.message);\n        "],[0,"    "]],"start1":1033,"start2":1033,"length1":41,"length2":48},{"diffs":[[0,"    "],[1,"    "],[1,"    "],[0,"else if"],[-1,"(parsedUrl.pathname == '/authenticate"],[1," (!authUrl)\n                {\n                  res.writeHead(200);\n                  res.end('Authentication failed"],[0,"')"],[1,";"],[0,"\n   "]],"start1":1091,"start2":1091,"length1":54,"length2":142},{"diffs":[[0,"iled');\n        "],[-1,"{"],[1,"        }"],[0,"\n            // "]],"start1":1222,"start2":1222,"length1":33,"length2":41},{"diffs":[[0,"    "],[-1,"// Resolve identifier, ass"],[1,"    else\n                {\n                  res.writeHead(302, { L"],[0,"oc"],[-1,"i"],[0,"at"],[-1,"e, build authentication URL\n            openid.authenticate(\n                parsedUrl.query.openid_identifier, // user supplied identifier"],[1,"ion: authUrl });\n                  res.end();\n                }\n              });"],[0,"\n   "]],"start1":1256,"start2":1256,"length1":178,"length2":160},{"diffs":[[0,"    "],[1,"}\n"],[0,"        "],[-1,"'http://triggerrefresh.azurewebsites.net/verify', // our callback URL\n                null, // realm (op"],[1,"else if(parsedUrl.pathname == '/verify')\n        {\n            // Verify identity asser"],[0,"tion"],[-1,"al)"],[0,"\n   "]],"start1":1417,"start2":1417,"length1":127,"length2":109},{"diffs":[[0,"    "],[-1,"    false, // attempt immediate authentication first?\n                function(authUrl)\n   "],[1,"// NOTE: Passing just the URL is also possible\n            relyingParty.verifyAssertion(req, function(error, result)\n"],[0,"    "]],"start1":1531,"start2":1531,"length1":99,"length2":125},{"diffs":[[0,"            "],[-1," "],[0,"{\n"],[-1,"      "],[0,"            "]],"start1":1652,"start2":1652,"length1":33,"length2":26},{"diffs":[[0,"ead("],[-1,"302, { Location: authUrl });\n                    res.end();\n    "],[1,"200);\n              res.end(!error && result.authenticated \n                  ? 'Success :)'\n                  : 'Failure :(');\n"],[0,"    "]],"start1":1690,"start2":1690,"length1":72,"length2":136}]],"length":2311,"saved":false}
{"contributors":[],"silentsave":false,"ts":1359851333766,"patch":[[{"diffs":[[0,"clude\n\n\n"],[1,"\n"],[0,"var serv"]],"start1":413,"start2":413,"length1":16,"length2":17}]],"length":2312,"saved":false}
{"ts":1359851339222,"patch":[[{"diffs":[[0,"lude\n\n\n\n"],[1,"\n"],[0,"var serv"]],"start1":414,"start2":414,"length1":16,"length2":17}]],"length":2313,"saved":false}
{"ts":1359851380231,"patch":[[{"diffs":[[0,"include\n"],[1,"asd"],[0,"\n\n\n\nvar "]],"start1":411,"start2":411,"length1":16,"length2":19}]],"length":2316,"saved":false}
{"ts":1359851406997,"patch":[[{"diffs":[[0,"ude\n"],[1,"-"],[0,"a"],[-1,"sd\n\n\n"],[0,"\nvar"]],"start1":415,"start2":415,"length1":14,"length2":10}]],"length":2312,"saved":false}
{"ts":1359851658544,"patch":[[{"diffs":[[0,"ude\n"],[-1,"-a"],[0,"\nvar"]],"start1":415,"start2":415,"length1":10,"length2":8},{"diffs":[[0,".listen("],[1,"process.env.PORT || "],[0,"80);"]],"start1":2298,"start2":2298,"length1":12,"length2":32}]],"length":2330,"saved":false}
